name: Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

permissions:
  contents: write  # Required for creating releases

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Get version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p build
          BINARY_NAME="pgtransfer"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          
          # Get build information
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          COMMIT_HASH=$(git rev-parse --short HEAD)
          
          go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }} -X main.commit=${COMMIT_HASH} -X main.date=${BUILD_DATE}" \
            -o build/${BINARY_NAME} .
          
          # Create archive
          cd build
          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip pgtransfer-${{ steps.version.outputs.VERSION }}-${{ matrix.suffix }}.zip ${BINARY_NAME}
          else
            tar -czf pgtransfer-${{ steps.version.outputs.VERSION }}-${{ matrix.suffix }}.tar.gz ${BINARY_NAME}
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pgtransfer-${{ matrix.suffix }}
          path: build/pgtransfer-${{ steps.version.outputs.VERSION }}-${{ matrix.suffix }}.*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$PREV_TAG" ]; then
            echo "## What's Changed" > changelog.md
            echo "" >> changelog.md
            git log --pretty=format:"- %s (%h)" ${PREV_TAG}..HEAD >> changelog.md
          else
            echo "## Initial Release" > changelog.md
            echo "" >> changelog.md
            echo "First release of PGTransfer - PostgreSQL data transfer tool with SSH tunnel support." >> changelog.md
          fi
          
          echo "" >> changelog.md
          echo "## Downloads" >> changelog.md
          echo "" >> changelog.md
          echo "Choose the appropriate binary for your platform:" >> changelog.md
          echo "" >> changelog.md
          echo "- **Linux (x64)**: \`pgtransfer-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz\`" >> changelog.md
          echo "- **Linux (ARM64)**: \`pgtransfer-${{ steps.version.outputs.VERSION }}-linux-arm64.tar.gz\`" >> changelog.md
          echo "- **macOS (Intel)**: \`pgtransfer-${{ steps.version.outputs.VERSION }}-darwin-amd64.tar.gz\`" >> changelog.md
          echo "- **macOS (Apple Silicon)**: \`pgtransfer-${{ steps.version.outputs.VERSION }}-darwin-arm64.tar.gz\`" >> changelog.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Release ${{ steps.version.outputs.VERSION }}
          body_path: changelog.md
          draft: false
          prerelease: false
          files: |
            artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional: Build and push Docker image
  docker:
    name: Build Docker Image
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Uncomment and configure if you want to push to Docker Hub
      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false  # Set to true if you want to push to registry
          tags: |
            pgtransfer:${{ steps.version.outputs.VERSION }}
            pgtransfer:latest
          build-args: |
            VERSION=${{ steps.version.outputs.VERSION }}